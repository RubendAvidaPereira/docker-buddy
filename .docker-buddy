#!/usr/bin/env bash
# Author: Ruben Pereira
# Version: 1.0.9

#--------------------------------------------------------------------------- Help and Documentation
#
#                               [ Installation of Docker Buddy ]
#
# ---> You can git clone from the repository on github using the following command:
#     -> git clone https://github.com/RubendAvidaPereira/docker-buddy/
# 
#
# ---> On your base folder of linux, generally /home/<username>, edit the file named .bashrc,
# at the end of the file add the following lines accordingly:
#     -> if [ -f ~/docker-buddy/.docker-buddy ]; then
#           source ~/docker-buddy/.docker-buddy
#        fi
#     -> if [ -f ~/docker-buddy/.docker-buddy-usage ]; then
#           source ~/docker-buddy/.docker-buddy-usage
#        fi
#
# ---> Alternative is to use the script for installation, it will add the lines in .bashrc for you.
#      For that you have to do the following:
#     -> chmod +x ~/docker-buddy/docker-buddy-install.sh
#     -> ./docker-buddy/docker-buddy-install.sh
#
#                               [ After installation of Docker Buddy ]
#
# ---> If you need help, on CLI write the following command: dbuddy -h
#
# ---> You are ready to use Docker Buddy
#
#         _____    _____
#        /  /  \__/  \  \
#        \ /|  /\/\  |\ /
#          _| |o o | |_
#         / . .\__/. . \     WOOF
#        /  . .(__). .  \
#        \  .  /__\  .  /
#         \___/\__/\___/
#

# Docker Buddy Help
# 
# Usage:
#   -> dbuddy -v for docker buddy version
#   -> dbuddy -h for docker buddy help
#
dbuddy() {
    while test $# != 0
    do
        case "$1" in
        -v) 
            printf "${LGREEN}Version $VERSION $CESC\n" 
            return 0
        ;;
        -h) 
            usage_general 
            return 0    
        ;;
        esac
    done
    return 0
}

#------------------------------------------------------------------ General Tasks and Variables
LRED="\e[1;31m"     # FOR LIGHT RED COLOR IN TERMINAL
LGREEN="\e[1;32m"   # FOR LIGHT GREEN COLOR IN TERMINAL
LYELLOW="\e[1;33m"  # FOR LIGHT YELLOW COLOR IN TERMINAL
CESC="\e[0m"        # TO ESCAPE PREVIOUS COLOR MODIFICATIONS

VERSION="1.0.8"     # FOR DOCKER BUDDY VERSION CHECK

# RegEx for <ext_port:int_port>
PORT_BIND_REGEX="^[0-9]{2,}:[0-9]{2,}$"

# RegEx for <ext_directory:int_directory>
DIR_BIND_REGEX="^([\/][a-zA-Z0-9_-]{1,}[^\/]):([\/][a-zA-Z0-9_-]{1,}[^\/])$"

#--------------------------------------------------------------------------------------- DOCKER
#------------------------------------------------------------------------------- Build Commands
# Builds a docker container with a tag for the container, directory of Dockerfile can be passed
#
# for docker build -t <container_name> <directory>*
# *if <directory> not passed runs on current directory
dbuild() {
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dbuild
        return 1
    fi

    if [[ $# -ge 1 ]]; then
        if [[ -z "$2" ]]; then
            docker build -t $1 .
        fi

        if [[ -d "$2" ]]; then
            docker build -t $1 $2
        else
            printf "${LRED}Error - Directory provided doesn't exist.$CESC\n"
            return 1
        fi
    fi
    return 0
}

#-------------------------------------------------------------------------------- Run Commands
# Runs a docker container in the background, can specify the image name
#
# for docker run -d -p <ext_port:int_port> <container_name> --name <image_name>*
# * image_name is optional 
drun() {
    # Check if no arguments are passed
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_drun
        return 1
    fi

    # Command needs at least 2 arguments to run
    if [[ $# -ge 2 ]]; then
        if [[ "$1" =~ $PORT_BIND_REGEX ]]; then
            if [ -z "$3" ]; then
                docker run -d -p $1 $2
            else
                docker run -d -p $1 --name $3 $2
            fi
        else
            printf "${LRED}Error - Port bind pattern incorrect.$CESC\n"
            return 1
        fi
    else
        printf "${LRED}Error - Too few arguments.$CESC\n"
        usage_drun
        return 1
    fi
    return 0
}

# Runs a docker container with volume mount
#
# for docker run -d -p <ext_port:int_port> -v <ext_directory:int_directory> <container_name> --name <image_name>*
# * image_name is optional
dmrun() {
    # Checking if no arguments passed
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dmrun
        return 1
    fi

    # Command needs at least 3 arguments to run
    if [[ $# -ge 3 ]]; then
        # Testing port bind pattern
        if [[ ! "$1" =~ $PORT_BIND_REGEX ]]; then
            printf "${LRED}Error - Port bind pattern incorrect.$CESC\n"
            return 1
        # Testing directory mapping pattern
        elif [[ ! "$2" =~ $DIR_BIND_REGEX ]]; then
            printf "${LRED}Error - Directory bind pattern incorrect\n"
            return 1
        else
            # Split the 2nd argument to verify if directory exists
            # Using IFS variable (Internal Field Separator) to separate 1st from 2nd directory in for loop
            IFS=":"
            DIR_BIND=($2)
            
            # Declaring directories array
            declare -a directories
            i=0
            
            for directory in "${DIR_BIND[@]}"
            do
                directories[i]=$directory
                ((i++))
            done

            if [[ ! -d ${directories[0]} ]]; then
                printf "${LRED}Error - Directory provided: ${directories[0]} don't exists.$CESC\n"
                return 1
            else
                if [[ -z $4 ]]; then
                    docker run -d -p $1 -v $2 $3
                else
                    docker run -d -p $1 -v $2 --name $4 $3
                fi
            fi
            return 0
        fi
    else
        printf "${LRED}Error - Too few arguments.$CESC\n"
        usage_dmrun
        return 1
    fi
    return 0
}

# Runs a docker container and starts a bash shell immediately after
#
# for docker run -it <external_port:inside_port> <container_name> --name <image_name>* bash
# * image_name is optional 
ditrun() {
    # Checking if no arguments passed
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_ditrun
        return 1
    fi

    if [[ $# -ge 2 ]]; then
        if [[ "$1" =~ $PORT_BIND_REGEX ]]; then
            if [[ -z "$3" ]]; then
                docker run -it -p $1 $2 bash
            else
                docker run -it -p $1 --name $3 $2 bash
            fi
        else
            printf "${LRED}Error - Port binding incorrect.$CESC\n"
            return 1
        fi
    else 
        printf "${LRED}Error - Too few arguments.$CESC\n"
        usage_ditrun
        return 1
    fi
    return 0
}

# Runs a docker container with a mounted volume and starts a bash shell immediately after
#
# for docker run -it -p <ext_port:int_port> -v <ext_directory:int_directory> <container_name> --name <image_name>* bash
# * image_name is optional
dmitrun() {
    # Checking if no arguments passed
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dmitrun
        return 1
    fi

    if [[ $# -ge 3 ]]; then
        if [[ ! "$1" =~ $PORT_BIND_REGEX ]]; then
            printf $"${LRED}Error - Port binding incorrect.$CESC\n"
            return 1
        else
            if [[ ! "$2" =~ $DIR_BIND_REGEX ]]; then
                printf "${LRED}Error - Directory binding incorrect.$CESC\n"
                return 1
            else
                # Split the 2nd argument to verify if directory exists
                # Using IFS variable (Internal Field Separator) to separate 1st from 2nd directory in for loop
                IFS=":"
                DIR_BIND=($2)
                
                # Declaring directories array
                declare -a directories
                i=0
                
                for directory in "${DIR_BIND[@]}"
                do
                    directories[i]=$directory
                    ((i++))
                done

                if [[ ! -d ${directories[0]} ]]; then
                    printf "${LRED}Error - Directory provided: ${directories[0]} don't exists.$CESC\n"
                    return 1
                else
                    if [[ -z "$4" ]]; then
                        docker run -it -p $1 -v $2 $3 bash
                    else
                        docker run -it -p $1 -v $2 --name $4 $3 bash
                    fi
                fi
            fi
        fi
    else 
        printf "${LRED}Error - Too few arguments.$CESC\n"
        usage_dmitrun
        return 1
    fi
    return 0
}

# Runs a bash shell inside of a docker image
#
# for docker exec -it <image_name> bash
dexec() {
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - no arguments passed.$CESC\n"
        usage_dexec
        return 1
    else
        if [[ $# -gt 1 ]]; then
            printf "${LRED}Error - too much arguments passed, only 1 required.$CESC\n"
            usage_dexec
            return 1
        else
            docker exec -it $1 bash
        fi
    fi
    return 0
}

#------------------------------------------------------------ Inspect Docker Processes Commands
# Shows current docker processes
#
# for docker ps
dps() {
    docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Networks}}\t{{.Mounts}}\t{{.RunningFor}}\t{{.Status}}'
}

# Shows current docker processes that match the search pattern
#
# for docker ps --filter name=<container_name|id> 
dgrep() {
    if [[ $# -ge 1 ]]; then
        docker ps --filter name=$1 --format 'table {{.ID}}\t{{.Names}}\t{{.Networks}}\t{{.Mounts}}\t{{.RunningFor}}\t{{.Status}}'
    else
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dgrep
        return 1
    fi
    return
}

# Show the docker logs for a specific image
#
# can be used with flags:
#   -> -t <number_lines> , it returns the last number_lines from docker logs  
#   -> -d , it returns more details in logs
#
# for docker logs <container_name|id>
dlogs() {
    local is_number="^[0-9]{0,5}$"

    if [[ ($# -ge 1) ]]; then
        if [[ ! "$1" = "-d" && ! "$1" = "-t" ]]; then
            docker logs $1
            return 0
        fi

        while test $# != 0
        do
            case $1 in
                -d|--details)
                    if [[ "$2" = "-t" ]]; then
                        if [[ ! $3 =~ $is_number ]]; then
                            printf "${LRED}Error - expected a number.$CESC\n"
                            usage_dlogs
                            return 1
                        else
                            if [[ -z "$4" ]]; then
                                printf "${LRED}Error - container name needed.$CESC\n"
                                usage_dlogs
                                return 1
                            else
                                docker logs --details -n $3 $4
                                return 0
                            fi
                        fi
                    fi 

                    if [[ ! -z "$2" ]]; then
                        docker logs --details $2
                        return 0
                    fi

                    printf "${LRED}Couldn't complete the requested command.$CESC\n"
                    return 1
                ;;
                -t|--tail) 
                    if [[ $2 =~ $is_number ]]; then
                        if [[ $3 = "-d" && ! -z "$4" ]]; then
                            docker logs --details -n $2 $4
                            return 0
                        elif [[ ! -z "$3" ]]; then
                            docker logs -n $2 $3
                            return 0
                        else
                            printf "${LRED}Error - container name needed.$CESC\n"
                            return 1
                        fi
                    fi

                    printf "${LRED}Error - expected a number.\n$CESC"
                    usage_dlogs
                    return 1
                 ;;
            esac
        done
    else
        usage_dlogs
        return 1
    fi
}

# Shows inspect output from docker inspect
#
# Can be used with flags:
#   -> -c for container inspect
#   -> -i for image inspect
#   -> -n for network inspect
#   -> both need to be followed by name or id
#
# for docker inspect
dinsp() {
    if [[ $# -ge 1 ]]; then
        while test $# != 0
        do
            case "$1" in
                -c) # Check for -c flag
                    if [[ -z $2 ]] || [[ $2 = '-i' || $2 = '-n' ]]; then
                        printf "${LRED}Error - Container name not found.$CESC\n"
                        usage_dinsp
                        return 1
                    else
                        docker container inspect $2
                        shift
                    fi ;;
                -i) # Check for -i flag
                    if [[ -z $2 ]] || [[ $2 = '-c' || $2 = '-n' ]]; then
                        printf "${LRED}Error - Image name not found.$CESC\n"
                        usage_dinsp
                        return 1
                    else
                        docker image inspect $2
                        shift
                    fi ;;
                -n) # Check for -n flag
                    if [[ -z $2 ]] || [[ $2 = '-c' || $2 = '-i' ]]; then
                        printf "${LRED}Error - Network name not found.$CESC\n"
                        usage_dinsp
                        return 1
                    else
                        docker network inspect $2
                        shift
                    fi ;;
            esac
            shift
        done
        return 0
    else
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dinsp
        return 1
    fi 
}

#-------------------------------------------------------------------------------- List Commands
# Lists the desired content
#  
# Can be used with flags:
#   -> -c for containers
#   -> -i for images
#   -> -n for networks
#   -> -s for services
#   -> -S or --secrets for secrets
#   -> -v for volumes
#
# The flags can be combined in order to output multiple ls results
#
dlist() {
    if [[ ! $# -ge 1 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dlist
        return 1
    fi

    local withContainer=0
    local withImages=0
    local withNetworks=0
    local withServices=0
    local withSecrets=0
    local withVolumes=0

    local containers=""
    local images=""
    local services=""
    local secrets=""
    local networks=""
    local volumes=""

    while test $# != 0
    do
        case $1 in
            -c) 
                withContainer=1 
                shift 
            ;;
            -i) 
                withImages=1
                shift    
            ;;
            -n)
                withNetworks=1
                shift
            ;;
            -s) 
                withServices=1
                shift
            ;;
            -S|--secrets)
                withSecrets=1
                shift
            ;;
            -v)
                withVolumes=1
                shift
            ;;
        esac
    done

    if [[ $withContainer -eq 1 ]]; then
        containers="$(docker container ls)"
        printf "$containers\n"
    fi

    if [[ $withImages -eq 1 ]]; then
        images="$(docker image ls)"
        printf "$images\n"
    fi

    if [[ $withNetworks -eq 1 ]]; then
        networks="$(docker network ls)"
        printf "$networks\n"
    fi

    if [[ $withServices -eq 1 ]]; then
        services="$(docker service ls)"
        printf "$services\n"
    fi

    if [[ $withSecrets -eq 1 ]]; then
        secrets="$(docker secret ls)"
        printf "$secrets\n"
    fi

    if [[ $withVolumes -eq 1 ]]; then
        volumes="$(docker volume ls)"
        printf "$volumes\n"
    fi

    unset container
    unset images
    unset services
    unset secrets
    unset networks
    unset volumes

    return 0
}

#------------------------------------------------------------------------------ Remove Commands
# Cleans all docker images
#
# force cleans all docker images in order to clean docker environment, restarts docker after
#dclean() {
#
#}

#------------------------------------------------------------------------------- DOCKER-COMPOSE
# Builds services with docker-compose build command
# 
# Can be used with flags:
#   -> -n for no cache
#   -> -s for build a specific service
#
dcbuild(){
    local nocache=0
    local specific=0
    local service_name=""
    
    if [[ $# -eq 0 ]]; then
        docker-compose build
        return 0
    else
        while getopts "ns:" flag
        do
            case $flag in
                n) nocache=1 ;;
                s) specific=1
                   service_name="$OPTARG" ;;
                \?) usage_dcbuild
                    return 1 ;;
            esac
        done

        if [[ $specific -eq 1 && $nocache -eq 1 && ! -z "$service_name" ]]; then
            docker-compose build --no-cache --service $service_name
            unset $service_name
            return 0
        fi

        if [[ $specific -eq 1 && ! -z "$service_name" ]]; then
            docker-compose build --service $service_name
            unset $service_name
            return 0
        fi

        if [[ $nocache -eq 1 ]]; then
            docker-compose build --no-cache
            return 0
        fi

        usage_dcbuild
        return 1  
    fi
}

# Builds and runs the services for docker-compose
#
#
# dcup(){

# }