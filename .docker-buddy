#!/usr/bin/env bash
# Author: Ruben Pereira
# Version: 1.1.0

#--------------------------------------------------------------------------- Help and Documentation
#
#                               [ Installation of Docker Buddy ]
#
# ---> You can git clone from the repository on github using the following command:
#     -> git clone https://github.com/RubendAvidaPereira/docker-buddy/
# 
#
# ---> On your base folder of linux, generally /home/<username>, edit the file named .bashrc,
# at the end of the file add the following lines accordingly:
#     -> if [ -f ~/docker-buddy/.docker-buddy ]; then
#           source ~/docker-buddy/.docker-buddy
#        fi
#     -> if [ -f ~/docker-buddy/.docker-buddy-usage ]; then
#           source ~/docker-buddy/.docker-buddy-usage
#        fi
#
# ---> Alternative is to use the script for installation, it will add the lines in .bashrc for you.
#      For that you have to do the following:
#     -> chmod +x ~/docker-buddy/docker-buddy-install.sh
#     -> ./docker-buddy/docker-buddy-install.sh
#
#                               [ After installation of Docker Buddy ]
#
# ---> If you need help, on CLI write the following command: dbuddy -h
#
# ---> You are ready to use Docker Buddy
#
#         _____    _____
#        /  /  \__/  \  \
#        \ /|  /\/\  |\ /
#          _| |o o | |_
#         / . .\__/. . \     WOOF
#        /  . .(__). .  \
#        \  .  /__\  .  /
#         \___/\__/\___/
#

# Docker Buddy Help
# 
# Usage:
#   -> dbuddy -v for docker buddy version
#   -> dbuddy -h for docker buddy help
#
dbuddy() {
    while test $# != 0
    do
        case "$1" in
        -v) 
            printf "${LGREEN}Version $VERSION $CESC\n" 
            return 0
        ;;
        -h) 
            usage_general 
            return 0    
        ;;
        esac
    done
    return 0
}

#------------------------------------------------------------------ General Tasks and Variables
LRED="\e[1;31m"     # FOR LIGHT RED COLOR IN TERMINAL
LGREEN="\e[1;32m"   # FOR LIGHT GREEN COLOR IN TERMINAL
LYELLOW="\e[1;33m"  # FOR LIGHT YELLOW COLOR IN TERMINAL
CESC="\e[0m"        # TO ESCAPE PREVIOUS COLOR MODIFICATIONS

VERSION="1.1.0"     # FOR DOCKER BUDDY VERSION CHECK

# RegEx for <ext_port:int_port>
PORT_BIND_REGEX="^[0-9]{2,}:[0-9]{2,}$"

# RegEx for <ext_directory:int_directory>
DIR_BIND_REGEX="^([\/][a-zA-Z0-9_-]{1,}[^\/]):([\/][a-zA-Z0-9_-]{1,}[^\/])$"

#--------------------------------------------------------------------------------------- DOCKER
#------------------------------------------------------------------------------- Build Commands
# Builds a docker container with a tag for the container, directory of Dockerfile can be passed
#
# for docker build -t <container_name> <directory>*
# *if <directory> not passed runs on current directory
dbuild() {
    if [[ $# == 0 ]]; then
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dbuild
        return 1
    elif [[ -z "$2" ]]; then
        docker build -t $1 .
    elif [[ -d "$2" ]]; then
        docker build -t $1 $2
    else
        printf "${LRED}Error - Directory provided doesn't exist.$CESC\n"
        return 1
    fi
    return 0
}

#-------------------------------------------------------------------------------- Run Commands
# Runs a docker container in the background, can specify the image name
#
# for docker run -d -p <ext_port:int_port> <container_name> --name <image_name>*
# * image_name is optional 
drun() {
    local error_msg=""
    local flags="-d"

    # 1st validate inputs
    if [[ $# -lt 2 || ! "$1" =~ $PORT_BIND_REGEX ]]; then
        error_msg="${LRED}Error - Invalid arguments passed.${CESC}\n"
    else
        # 2nd construct the command
        flags+=" -p $1"
        if [[ -n "$3" ]]; then
            flags+=" --name $3"
        fi
        docker run $flags $2
    fi
    
    # Throw error message
    if [[ -n "$error_msg" ]]; then
        printf "${error_msg}"
        usage_drun
        return 1
    fi
    return 0
}

# Runs a docker container with volume mount
#
# for docker run -d -p <ext_port:int_port> -v <ext_directory:int_directory> <container_name> --name <image_name>*
# * image_name is optional
dmrun() {
    local error_msg=""
    local flags=""

    # 1st validate inputs
    if [[ $# -lt 3 || ! "$1" =~ $PORT_BIND_REGEX || ! "$2" =~ $DIR_BIND_REGEX ]]; then
        error_msg="${LRED}Error - Invalid arguments passed.${CESC}\n"
    else
        # 2nd construct the command
        flags+=" -p $1 -v $2"
        if [[ -n "$4" ]]; then
            flags+=" --name $4"
        fi

        IFS=":"
        DIR_BIND=($2)
        declare -a directories
        i=0
        for directory in ${DIR_BIND[@]}
        do
            directories[i]=$directory
            ((i++))
        done

        if [[ ! -d ${directories[0]} ]]; then
            error_msg="${LRED}Error - Directory provided doesn't exist.\n${CESC}"
        fi
    fi

    if [[ -n "$error_msg" ]]; then
        printf "${error_msg}"
        usage_dmrun
        return 1
    else
        docker run $flags $3
    fi
    return 0
}

# Runs a docker container and starts a bash shell immediately after
#
# for docker run -it <external_port:inside_port> <container_name> --name <image_name>* bash
# * image_name is optional 
ditrun() {
    local error_msg=""
    local flags="-it"

    # 1st validate inputs
    if [[ $# -lt 2 || ! "$1" =~ $PORT_BIND_REGEX ]]; then
        error_msg="${LRED}Error - Invalid arguments passed.${CESC}\n"
    else
        # 2nd construct the command
        flags+=" -p $1 $2"
        if [[ -n "$3" ]]; then
            flags+=" --name $3"
        fi
        docker run $flags bash
    fi

    # Throw error message
    if [[ -n "$error_msg" ]]; then
        printf "${error_msg}"
        usage_ditrun
        return 1
    fi
    return 0
}

# Runs a docker container with a mounted volume and starts a bash shell immediately after
#
# for docker run -it -p <ext_port:int_port> -v <ext_directory:int_directory> <container_name> --name <image_name>* bash
# * image_name is optional
dmitrun() {
    local error_msg=""
    local flags="-it"

    # 1st validate inputs
    if [[ $# -lt 3 || ! "$1" =~ PORT_BIND_REGEX || ! "$2" =~ DIR_BIND_REGEX ]]; then
        error_msg="${LRED}Error - Invalid arguments passed.\n${CESC}"
    else
        # 2nd contruct the command
        flags+=" -p $1 -v $2"
        if [[ -n "$4" ]]; then
            flags+=" --name $4"
        fi

        IFS=":"
        DIR_BIND=($2)
        declare -a directories
        i=0
        for directory in ${DIR_BIND[@]}
        do
            directories[i]=$directory
            ((i++))
        done

        if [[ ! -d ${directories[0]} ]]; then
            error_msg="${LRED}Error - Directory provided doesn't exist.\n${CESC}"
        fi
    fi

    # Throw error if needed
    if [[ -n "$error_msg" ]]; then
        printf "${error_msg}"
        usage_dmitrun
        return 1
    else
        docker run $flags $3 bash
    fi
    return 0
}

# Runs a bash shell inside of a docker image
#
# for docker exec -it <image_name> bash
dexec() {
    # 1st validate usage
    if [[ $# -lt 1 || $# -gt 1 ]]; then
        printf "${LRED}Error - Bad usage.\n${CESC}"
        usage_dexec
    else
        docker exec -it $1 bash
    fi
    return 0
}

#------------------------------------------------------------ Inspect Docker Processes Commands
# Shows current docker processes
#
# for docker ps
dps() {
    docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Networks}}\t{{.Mounts}}\t{{.RunningFor}}\t{{.Status}}'
}

# Shows current docker processes that match the search pattern
#
# for docker ps --filter name=<container_name|id> 
dgrep() {
    if [[ $# -ge 1 ]]; then
        docker ps --filter name=$1 --format 'table {{.ID}}\t{{.Names}}\t{{.Networks}}\t{{.Mounts}}\t{{.RunningFor}}\t{{.Status}}'
    else
        printf "${LRED}Error - No arguments passed.$CESC\n"
        usage_dgrep
        return 1
    fi
    return
}

# Show the docker logs for a specific image
#
# can be used with flags:
#   -> -t <number_lines> , it returns the last number_lines from docker logs  
#   -> -d , it returns more details in logs
#
# for docker logs <container_name|id>
dlogs() {
    local is_number="^[0-9]{0,5}$"
    local options=""
    local error_msg=""
    local container_name=""

    if [[ $# -eq 0 ]]; then
        error_msg="${LRED}Error - No arguments passed.\n${CESC}"
    else
        while test $# != 0
        do
            case $1 in
                -d|--details) options+=" --details";;
                -t|--tail)
                    if [[ $2 =~ $is_number ]]; then
                        options+=" -n $2"
                        shift
                    else
                        error_msg="${LRED}Error - Expected a number\n.${CESC}"
                    fi
                ;;
                *)
                    if [[ -z "$container_name" ]]; then
                        container_name="$1"
                    else
                        error_msg="${LRED}Error - Invalid arguments passed\n.${CESC}"
                    fi
                ;;
            esac
            shift
        done
    fi

    if [[ -n "$error_msg" ]]; then
        printf "${error_msg}"
        usage_dlogs
        return 1
    fi

    if [[ -z "$container_name" ]]; then
        error_msg="${LRED}Error - Container name needed.\n${CESC}"
        printf "${error_msg}"
        usage_dlogs
        return 1
    else
        docker logs $options $container_name
    fi
}

# Shows inspect output from docker inspect
#
# Can be used with flags:
#   -> -c for container inspect
#   -> -i for image inspect
#   -> -n for network inspect
#   -> both need to be followed by name or id
#
# for docker inspect
dinsp() {
    local command=""
    local error_msg=""

    if [[ $# -lt 1 ]]; then
        error_msg="Invalid usage"
    else
        case  "$1" in
            -c) command="docker container inspect" ;;
            -i) command="docker image inspect" ;;
            -n) command="docker network inspect" ;;
            *) error_msg="Invalid arguments passed" ;;
        esac
    fi
    shift

    if [[ -z $1 ]]; then
        error_msg="Flag not found"
    else
        $command $1
    fi

    if [[ -n "$error_msg" ]]; then
        printf "${LRED}Error - $error_msg.\n${CESC}"
        return 1
    fi
    return 0
}

#-------------------------------------------------------------------------------- List Commands
# Lists the desired content
#  
# Can be used with flags:
#   -> -c for containers
#   -> -i for images
#   -> -n for networks
#   -> -s or --services for services
#   -> -S or --secrets for secrets
#   -> -v for volumes
#
# The flags can be combined in order to output multiple ls results
#
dlist() {
    local error_msg=""

    if [[ $# -lt 1 ]]; then
        error_msg="No arguments passed"
    else
        while test $# != 0
        do
            case $1 in
                -c|--containers) printf "$(docker container ls)\n" ;;
                -i|--images) printf "$(docker image ls)\n" ;;
                -n|--networks) printf "$(docker network ls)\n" ;;
                -S|--secrets) printf "$(docker secret ls)\n" ;;
                -s|--services) printf "$(docker service ls)\n" ;;
                -v|--volumes) printf "$(docker volume ls)\n" ;;
                *) error_msg="Argument $1 is not used in dlist"
            esac
            shift
        done
    fi

    if [[ -n "$error_msg" ]]; then
        print "${LRED}Error - $error_msg.\n${CESC}"
        usage_dlist
        return 1
    fi
    return 0
}

#------------------------------------------------------------------------------ Remove Commands
# Cleans all docker images
#
# Can be used with flags:
#   -> -c for containers
#   -> -s for secrets 
#   -> -v for volumes
#   -> -i for images
#   -> -n for networks
#
dclean() {
    local error_msg=""

    if [[ $# -lt 1 ]]; then
        error_msg="No arguments passed"
    else
        while test $# != 0
        do
            case $1 in 
                -c|--containers) docker container rm $(docker container ls -q) ;;
                -i|--images) docker image rm $(docker image ls -q) ;;
                -n|--networks) docker network rm $(docker network ls -q) ;;
                -s|--secrets) docker secret rm $(docker secret ls -q) ;;
                -v|--volumes) docker volume rm $(docker volume ls -q) ;;
                *) error_msg="Argument $1 not used in dclean"
            esac
        done
    fi

    if [[ -n "$error_msg" ]]; then
        printf "${LRED}Error - $error_msg.\n${CESC}"
        usage_dclean
        return 1
    fi
    return 0
}

#--------------------------------------------------------------------------------- DOCKER SWARM
# The idea for this command is to have an interactive experience with
# docker swarm in only one command, to initiate a swarm, get the token
# to add nodes to the swarm, etc...
#
# Flags used in this command:
#   -> -i for docker swarm init (current node where is executed becomes manager node)
#   -> -w for docker swarm join-token worker
#   -> -m for docker swarm join-token manager
#   -> -j for docker swarm join --token <join_token>
#
dswarm() {
    local swarm_init=0
    local swarm_worker=0
    local swarm_manager=0
    local error_msg=""
    local command=""

    if [[ $# -eq 0 ]]; then
        error_msg="No arguments passed"
    else
        while test $# != 0
        do
            case $1 in 
                -i|--init) command="docker swarm init" ;;
                -w|--worker) command="docker swarm join-token worker" ;;
                -m|--manager) command="docker swarm join-token manager" ;;
                -j|--join) command="docker swarm join --token" ;;
                *) error_msg="Argument $1 not used in dswarm"
            esac
            shift
        done
    fi

    # Run the commands if valid usage was caught
    if [[ -n "$command" && -n "$1" ]]; then
        $command $1
    elif [[ -n "$command" ]]; then
        $command
    fi

    # Throw error
    if [[ -n "$error_msg" ]]; then
        printf "${LRED}Error - $error_msg.\n${CESC}"
        usage_dswarm
        return 1
    fi
    return 0
}

# Alias for the docker stack command
#
# Can be used with flags:
#   -> -d for docker stack deploy -c <compose_file_path>
#   -> ...
#
# dstack() {

# }

#------------------------------------------------------------------------------- DOCKER-COMPOSE
# Builds services with docker-compose build command
# 
# Can be used with flags:
#   -> -n for no cache
#   -> -s for build a specific service
#
dcbuild(){
    local nocache=""
    local service=""
    local service_name=""
    local error_msg=""

    if [[ $# -eq 0 ]]; then
        error_msg="No arguments passed"
    else
        while getopts "ns:" flag
        do
            case $flag in
                n) nocache="--no-cache" ;;
                s) 
                    service="--service"
                    service_name="$OPTARG"
                ;;
                \?) error_msg="Argument passed not valid" ;;
            esac
        done
    fi

    if [[ -n "$error_msg" ]]; then
        printf "${LRED}Error - $error_msg.\n${CESC}"
        usage_dcbuild
        return 1
    elif [[ -z "$service_name" ]]; then
        service=""
    else
        docker-compose build $nocache $service $service_name
    fi
    return 0
}

# Builds and runs the services for docker-compose
# Attention: docker-compose up will use -d by default, which means the containers 
# will start in background.
#
# Can be used with flags:
#   -> -s <service_name> 
#   -> -b for build 
#
# dcup(){
#     local serviceName=""
#     local withBuild=0

#     if [[ $# -eq 0 ]]; then
#         docker-compose up
#     else
#         # TODO
#     fi
# }