#!/usr/bin/env bash
# Author: Ruben Pereira
# Version: 1.0.7

# This file has minor alterations compared to the .docker-buddy file,
# its purpose is to unit test all docker-buddy functions
#   
#         _____    _____
#        /  /  \__/  \  \
#        \ /|  /\/\  |\ /
#          _| |o o | |_
#         / . .\__/. . \     WOOF, let's test it
#        /  . .(__). .  \
#        \  .  /__\  .  /
#         \___/\__/\___/
#

#------------------------------------------------------------------ General Tasks and Variables
# RegEx for <ext_port:int_port>
PORT_BIND_REGEX="^[0-9]{2,}:[0-9]{2,}$"

# RegEx for <ext_directory:int_directory>
DIR_BIND_REGEX="^([\/][a-zA-Z0-9_-]{1,}[^\/]):([\/][a-zA-Z0-9_-]{1,}[^\/])$"

#--------------------------------------------------------------------------------- Docker Test
t_dbuild() {
    if [[ $# == 0 ]]; then
        echo "error"
        return 0
    fi

    if [[ $# -ge 1 ]]; then
        if [[ -z "$2" ]]; then
           echo "passed"
           return 0
        fi

        if [[ -d "$2" ]]; then
            echo "passed"
            return 0
        else
            echo "error"
            return 1
        fi
    fi
    return 0
}
 
t_drun() {
    # Check if no arguments are passed
    if [[ $# == 0 ]]; then
        echo "error"
        return 1
    fi

    # Command needs at least 2 arguments to run
    if [[ $# -ge 2 ]]; then
        if [[ "$1" =~ $PORT_BIND_REGEX ]]; then
            if [ -z "$3" ]; then
                echo "passed"
                return 0
            else
                echo "passed"
                return 0
            fi
        else
            echo "error"
            return 1
        fi
    else
        echo "error"
        return 1
    fi
    return 0
}

t_dmrun() {
    # Checking if no arguments passed
    if [[ $# == 0 ]]; then
        echo "error"
        return 1
    fi

    # Command needs at least 3 arguments to run
    if [[ $# -ge 3 ]]; then
        # Testing port bind pattern
        if [[ ! "$1" =~ $PORT_BIND_REGEX ]]; then
            echo "error"
            return 1
        # Testing directory mapping pattern
        elif [[ ! "$2" =~ $DIR_BIND_REGEX ]]; then
            echo "error"
            return 1
        else
            # Split the 2nd argument to verify if directory exists
            # Using IFS variable (Internal Field Separator) to separate 1st from 2nd directory in for loop
            IFS=":"
            DIR_BIND=($2)
            
            # Declaring directories array
            local -a directories
            i=0
            
            for directory in "${DIR_BIND[@]}"
            do
                directories[i]=$directory
                ((i++))
            done

            if [[ ! -d ${directories[0]} ]]; then
                echo "error"
                return 1
            else
                if [[ -z $4 ]]; then
                    echo "passed"
                else
                    echo "passed"
                fi
            fi
            return 0
        fi
    else
        echo "error"
        return 1
    fi

    unset directories
    return 0
}

t_ditrun() {
    # Checking if no arguments passed
    if [[ $# == 0 ]]; then
        echo "error"
        return 1
    fi

    if [[ $# -ge 2 ]]; then
        if [[ "$1" =~ $PORT_BIND_REGEX ]]; then
            if [[ -z "$3" ]]; then
                echo "passed"
            else
                echo "passed"
            fi
        else
            echo "error"
            return 1
        fi
    else 
        echo "error"
        return 1
    fi
    return 0
}

t_dmitrun() {
    # Checking if no arguments passed
    if [[ $# == 0 ]]; then
        echo "error"
        return 1
    fi

    if [[ $# -ge 3 ]]; then
        if [[ ! "$1" =~ $PORT_BIND_REGEX ]]; then
            echo "error"
            return 1
        else
            if [[ ! "$2" =~ $DIR_BIND_REGEX ]]; then
                echo "error"
                return 1
            else
                # Split the 2nd argument to verify if directory exists
                # Using IFS variable (Internal Field Separator) to separate 1st from 2nd directory in for loop
                IFS=":"
                DIR_BIND=($2)
                
                # Declaring directories array
                local -a directories
                i=0
                
                for directory in "${DIR_BIND[@]}"
                do
                    directories[i]=$directory
                    ((i++))
                done

                if [[ ! -d ${directories[0]} ]]; then
                    echo "error"
                    return 1
                else
                    if [[ -z "$4" ]]; then
                        echo "passed"
                    else
                        echo "passed"
                    fi
                fi
            fi
        fi
    else 
        echo "error"
        return 1
    fi

    unset directories
    return 0
}

t_dexec() {
    if [[ $# == 0 ]]; then
        echo "error"
        return 1
    else
        if [[ $# -gt 1 ]]; then
            echo "error"
            return 1
        else
            echo "passed"
            return 0
        fi
    fi
    return 0
}

t_dgrep() {
    if [[ $# -ge 1 ]]; then
        echo "passed"
    else
        echo "error"
        return 1
    fi
    return 0
}

t_dlogs() {
    local is_number="^[0-9]{0,5}$"

    if [[ ($# -ge 1) ]]; then
        if [[ ! "$1" = "-d" && ! "$1" = "-t" ]]; then
            echo "passed"
            return 0
        fi

        while test $# != 0
        do
            case $1 in
                -d|--details)
                    if [[ ! -z "$2" ]]; then
                        echo "passed"
                        return 0
                    fi

                    if [[ "$2" = "-t" ]]; then
                        if [[ ! $3 =~ $is_number ]]; then
                            echo "error"
                            return 1
                        else
                            if [[ -z "$4" ]]; then
                                echo "error"
                                return 1
                            else
                                echo "passed"
                                return 0
                            fi
                        fi
                    fi 

                    echo "error"
                    return 1
                ;;
                -t|--tail) 
                    if [[ $2 =~ $is_number ]]; then
                        if [[ "$3" = "-d" && ! -z "$4" ]]; then
                            echo "passed"
                            return 0
                        elif [[ ! -z "$3" ]]; then
                            echo "passed"
                            return 0
                        else
                            echo "error"
                            return 1
                        fi
                    fi
                    
                    echo "error"
                    return 1
                 ;;
            esac
        done
    else
        echo "error"
        return 1
    fi
}

t_dinsp() {
    if [[ $# -ge 1 ]]; then
        while test $# != 0
        do
            case "$1" in
                -c) # Check for -c flag
                    if [[ -z $2 ]] || [[ $2 = '-i' || $2 = '-n' ]]; then
                        echo "error"
                        return 1
                    else
                        echo "passed"
                        return 0
                    fi ;;
                -i) # Check for -i flag
                    if [[ -z $2 ]] || [[ $2 = '-c' || $2 = '-n' ]]; then
                        echo "error"
                        return 1
                    else
                        echo "passed"
                        return 0
                    fi ;;
                -n) # Check for -n flag
                    if [[ -z $2 ]] || [[ $2 = '-c' || $2 = '-i' ]]; then
                        echo "error"
                        return 1
                    else
                        echo "passed"
                        return 0
                    fi ;;
            esac
            shift
        done
        return 0
    else
        echo "error"
        return 1
    fi 
}

#-------------------------------------------------------------------------- Docker Compose Test
t_dcbuild(){
    local nocache=0
    local specific=0
    local service_name=""
    
    if [[ $# -eq 0 ]]; then
        echo "passed"
        return 0
    else
        while getopts "ns:" flag
        do
            case $flag in
                n) nocache=1 ;;
                s) specific=1
                   service_name="$OPTARG" ;;
                \?) echo "error"
                    return 1 
                ;;
            esac
        done

        if [[ $specific -eq 1 && $nocache -eq 1 && ! -z "$service_name" ]]; then
            echo "passed"
            unset $service_name
            return 0
        fi

        if [[ $specific -eq 1 && ! -z "$service_name" ]]; then
            echo "passed"
            unset $service_name
            return 0
        fi

        if [[ $nocache -eq 1 ]]; then
            echo "passed"
            return 0
        fi

        echo "error"
        return 1  
    fi
}