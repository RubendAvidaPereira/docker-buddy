#!/usr/bin/env bash
# Author: Ruben Pereira
# Version: 1.1.0

# This file has minor alterations compared to the .docker-buddy file,
# its purpose is to unit test all docker-buddy functions
#   
#         _____    _____
#        /  /  \__/  \  \
#        \ /|  /\/\  |\ /
#          _| |o o | |_
#         / . .\__/. . \     WOOF, let's test it
#        /  . .(__). .  \
#        \  .  /__\  .  /
#         \___/\__/\___/
#

#------------------------------------------------------------------ General Tasks and Variables
# RegEx for <ext_port:int_port>
PORT_BIND_REGEX="^[0-9]{2,}:[0-9]{2,}$"

# RegEx for <ext_directory:int_directory>
DIR_BIND_REGEX="^([\/][a-zA-Z0-9_-]{1,}[^\/]):([\/][a-zA-Z0-9_-]{1,}[^\/])$"

#--------------------------------------------------------------------------------- Docker Test
t_dbuild() {
    if [[ $# == 0 ]]; then
        echo "error"
        return 1
    elif [[ -z "$2" ]]; then
        echo "passed"
    elif [[ -d "$2" ]]; then
        echo "passed"
    else
        echo "error"
        return 1
    fi
    return 0
}
 
t_drun() {
    local error_msg=""
    local flags="-d"

    if [[ $# -lt 2 || ! "$1" =~ $PORT_BIND_REGEX ]]; then
        error_msg="error"
    else
        echo "passed"
    fi
    
    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    fi
    return 0
}

t_dmrun() {
    local error_msg=""
    local flags=""

    # Check for correct arguments usage
    if [[ $# -lt 3 || ! "$1" =~ $PORT_BIND_REGEX || ! "$2" =~ $DIR_BIND_REGEX ]]; then
        error_msg="error"
    else
        IFS=":"
        DIR_BIND=($2)
        declare -a directories
        i=0

        for directory in ${DIR_BIND[@]}
        do
            directories[i]=$directory
            ((i++))
        done

        if [[ ! -d ${directories[0]} ]]; then
            error_msg="error"
        fi
    fi

    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    else
        echo "passed"
    fi
    return 0
}

t_ditrun() {
    local error_msg=""
    local flags="-it"

    if [[ $# -lt 2 || ! "$1" =~ $PORT_BIND_REGEX ]]; then
        error_msg="error"
    else
        flags+=" -p $1 $2"
        if [[ -n "$3" ]]; then
            flags+=" --name $3"
        fi
        echo "passed"
    fi

    if [[ -n "$error_msg" ]]; then
        printf "${error_msg}"
        return 1
    fi
    return 0
}

t_dmitrun() {
    local error_msg=""
    local flags="-it"

    # 1st validate inputs
    if [[ $# -lt 3 || ! "$1" =~ $PORT_BIND_REGEX || ! "$2" =~ $DIR_BIND_REGEX ]]; then
        error_msg="error"
    else
        # 2nd contruct the command
        flags+=" -p $1 -v $2"
        if [[ -n "$4" ]]; then
            flags+=" --name $4"
        fi

        IFS=":"
        DIR_BIND=($2)
        declare -a directories
        i=0
        for directory in ${DIR_BIND[@]}
        do
            directories[i]=$directory
            ((i++))
        done

        if [[ ! -d ${directories[0]} ]]; then
            error_msg="error"
        fi
    fi

    # Throw error if needed
    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    else
        echo "passed"
    fi
    return 0
}

t_dexec() {
    # 1st validate usage
    if [[ $# -lt 1 || $# -gt 1 ]]; then
       echo "error"
    else
        echo "passed"
    fi
    return 0
}

t_dgrep() {
    if [[ $# -ge 1 ]]; then
        echo "passed"
    else
        echo "error"
        return 1
    fi
    return 0
}

t_dlogs() {
    local is_number="^[0-9]{0,5}$"
    local options=""
    local error_msg=""
    local container_name=""

    if [[ $# -eq 0 ]]; then
        error_msg="error"
    else
        while test $# != 0
        do
            case $1 in
                -d|--details) options+=" --details";;
                -t|--tail)
                    if [[ $2 =~ $is_number ]]; then
                        options+=" -n $2"
                        shift
                    else
                        error_msg="${LRED}Error - Expected a number\n.${CESC}"
                    fi
                ;;
                *)
                    if [[ -z "$container_name" ]]; then
                        container_name="$1"
                    else
                        error_msg="${LRED}Error - Invalid arguments passed\n.${CESC}"
                    fi
                ;;
            esac
            shift
        done
    fi

    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    fi

    if [[ -z "$container_name" ]]; then
        echo "error"
        return 1
    else
        echo "passed"
    fi
}

t_dinsp() {
    local command=""
    local error_msg=""

    if [[ $# -lt 1 ]]; then
        error_msg="error"
    else
        case  "$1" in
            -c) command="docker container inspect" ;;
            -i) command="docker image inspect" ;;
            -n) command="docker network inspect" ;;
            *) error_msg="Invalid arguments passed" ;;
        esac
    fi
    shift

    if [[ -z $1 ]]; then
        echo "error"
    else
        echo "passed"
    fi

    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    fi
    return 0
}

#-------------------------------------------------------------------------- Docker Compose Test
t_dcbuild(){
    local nocache=""
    local service=""
    local service_name=""
    local error_msg=""

    if [[ $# -eq 0 ]]; then
        echo "passed"
    else
        while getopts "ns:" flag
        do
            case $flag in
                n) nocache="--no-cache" ;;
                s) 
                    service="--service"
                    service_name="$OPTARG"
                ;;
                \?) error_msg="erro" ;;
            esac
        done
    fi

    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    elif [[ -z "$service_name" ]]; then
        service=""
    else
        echo "passed"
    fi
    return 0
}

t_dswarm() {
    local swarm_init=0
    local swarm_worker=0
    local swarm_manager=0
    local error_msg=""
    local command=""

    if [[ $# -eq 0 ]]; then
        error_msg="error"
    else
        while test $# != 0
        do
            case $1 in 
                -i|--init) command="docker swarm init" ;;
                -w|--worker) command="docker swarm join-token worker" ;;
                -m|--manager) command="docker swarm join-token manager" ;;
                *) error_msg="error"
            esac
            shift
        done
    fi

    # Throw error
    if [[ -n "$error_msg" ]]; then
        echo "error"
        return 1
    fi

    # Run the commands if valid usage was caught
    if [[ -n "$command" ]]; then
        echo "passed"
    fi

    return 0
}