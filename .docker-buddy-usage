#!/usr/bin/env bash
# Author: Ruben Pereira
# Version: 1.0.8

# This file is intended to provide help to the user of docker-buddy
#   
#         _____    _____
#        /  /  \__/  \  \
#        \ /|  /\/\  |\ /
#          _| |o o | |_
#         / . .\__/. . \     WOOF, I have help on usage
#        /  . .(__). .  \
#        \  .  /__\  .  /
#         \___/\__/\___/
#

# ------------------------------------------------------- Variables
LRED="\e[1;31m"     # FOR LIGHT RED COLOR IN TERMINAL
LGREEN="\e[1;32m"   # FOR LIGHT GREEN COLOR IN TERMINAL
LYELLOW="\e[1;33m"  # FOR LIGHT YELLOW COLOR IN TERMINAL
CESC="\e[0m"        # TO ESCAPE PREVIOUS COLOR MODIFICATIONS

usage_general(){
    printf "\
    # ${LGREEN}[ DOCKER USAGE ]$CESC
    $(usage_dbuild)
    $(usage_drun)
    $(usage_dmrun)
    $(usage_ditrun)
    $(usage_dmitrun)
    $(usage_dexec)
    $(usage_dps)
    $(usage_dgrep)
    $(usage_dinsp)
    $(usage_dlist)

    # ${LBLUE}[ DOCKER-COMPOSE USAGE ]$CESC
    $(usage_dcbuild)
    \n"
}

# ---------------------------------------------------- Usage Docker
usage_dbuild(){
    printf "\n
    # [ COMMAND dbuild ] 
    #                                                                                     
    #   The dbuild command is an interpretation for docker build,
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dbuild my_container my_image_name$CESC                              
    \n"
}

usage_drun(){
   printf "\n
    # [ COMMAND drun ] 
    #                                                                                     
    #   The drun command is an interpretation for docker run,
    #   without the mount volume option, The image name is optional.
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dmrun 80:80 my_container my_image_name$CESC                    
    \n" 
}

usage_dmrun(){
    printf "\n
    # [ COMMAND dmrun ] 
    #                                                                                     
    #   The dmrun command is an interpretation for docker run,
    #   with the mount volume option, The image name is optional.
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dmrun 80:80 /home:/docker my_container my_container my_image_name$CESC                                                
    \n"
}

usage_ditrun(){
    printf "\n
    # [ COMMAND ditrun ] 
    #                                                                                     
    #   The ditun command is an interpretation for docker run,
    #   with the -it option, in order to get a bash shell after
    #   running the docker image. The image name is optional.
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}ditrun 80:80 my_container my_image_name$CESC                                   
    \n"
}

usage_dmitrun(){
    printf "\n
    # [ COMMAND dmitrun ] 
    #                                                                                     
    #   The dmitun command is an interpretation for docker run,
    #   with the -it option, in order to get a bash shell after
    #   running the docker image. Uses the volume mount option too.
    #   Image name is optional.
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dmitrun 80:80 /home:/docker my_container my_image_name$CESC                                                 
    \n"
}

usage_dexec(){
    printf "\n
    # [ COMMAND dexec ] 
    #                                                                                     
    #   The dps command is an interpretation for docker exec,
    #   it needs an argument, the image name. Enters a bash shell
    #   in that docker image immediately.
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dexec my_image$CESC                                                                   
    \n" 
}

usage_dps(){
   printf "\n
    # [ COMMAND dps ] 
    #                                                                                     
    #   The dps command is an interpretation for docker ps,
    #   it doesn't need any argument, and output a different
    #   format of docker ps. 
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dps$CESC                                                        
    \n" 
}

usage_dgrep(){
    printf "\n
    # [ COMMAND dgrep ] 
    #                                                                                     
    #   The dgrep command is an interpretation for docker ps, 
    #   it must be passed an argument, that could be <container_name|id> 
    #   in order to run the command properly. 
    #                                                                                     
    #   Example:                                                                        
    #    ${LGREEN}dgrep 3fd00abc4$CESC                                                                           
    \n"
}

usage_dlogs(){
    printf "\n
    # [ COMMAND dlogs ] 
    #                                                                                     
    #   -d -> Use -d for docker logs --details <container|image|id>                       
    #   -t -> Use -t for docker -n <number_lines> <container|image|id>                    
    #                                                                                     
    #   The two flags can be used together:                                               
    #   -dt -> Use -dt for docker logs --details -n <number_lines> <container|image|id>   
    #   
    #   Example:
    #    ${LGREEN}dlogs -d -t 10 my_container$CESC                                                                            
    \n"
}

usage_dinsp(){
    printf "\n
    # [ COMMAND dinsp ]
    #                                                               
    #   -c -> Use -c for docker container inspect <container_name>  
    #   -i -> Use -i for docker image inspect <image_name>          
    #   -n -> Use -n for docker network inspect <network_name>      
    #                                                               
    #   Only one flag supported, after the flag an                  
    #   argument must be passed, it can be the container,           
    #   image or network name.                                      
    #
    #   Example:
    #    ${LGREEN}dinsp -c my_container$CESC
    #    ${LGREEN}dinsp -i my_image$CESC 
    \n"
}

usage_dlist(){
    printf "\n
    # [ COMMAND dlist ]
    #                                                               
    #   -c -> Use -c for docker container ls  
    #   -i -> Use -i for docker image ls         
    #   -s -> Use -n for docker service ls      
    #                                                               
    #   The three flags can be combined for a combined output                  
    #   with docker ls.                                      
    #
    #   Example:
    #    ${LGREEN}dlist -c$CESC
    #    ${LGREEN}dlist -i$CESC
    #    ${LGREEN}dlist -c -i -s$CESC 
    \n"
}

#usage_dclean(){}

# -------------------------------------------- Usage Docker Compose
usage_dcbuild(){
        printf "\n
    # [ COMMAND dcbuild ]
    #                                                               
    #   -n -> Use -n for docker compose build --no-cache  
    #   -s -> Use -s for docker compose build          
    #                                                               
    #   The two flags can be combined for a build context                  
    #   with no cache and a specific service.            
    #
    #   Example:
    #    ${LGREEN}dcbuild$CESC
    #    ${LGREEN}dcbuild -n$CESC
    #    ${LGREEN}dcbuild -s my_service$CESC
    \n"
}